<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>ocCollectionView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>&lt;UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout&gt;
@property(nonatomic, strong)UICollectionView *collectionView;

#pragma mark - &lt; request &gt;
-(void)headerRequest{
    _viewModel.headerRefresh = true;
    [_viewModel &lt;#expression#&gt;];
}

-(void)footerRequest{
    _viewModel.headerRefresh = false;
    [_viewModel &lt;#expression#&gt;];
}

#pragma mark &lt; delegate &gt;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 2;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return self.datas.count;
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    return CGSizeMake(70, 30);//注意这里的宽度，不要超屏
}

//- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section {
//    //不同的section不同行间距
//}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
//    NSString *identifier = [NSString stringWithFormat:@"id_%ld",(long)indexPath.row];
//    [self.collectionView registerClass:[LottieAnimationsCell class] forCellWithReuseIdentifier:identifier];
    &lt;#name#&gt; *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([&lt;#name#&gt; class]) forIndexPath:indexPath];
    [cell refreshCellWithModel:self.datas[indexPath.row]];
    return cell;
}

- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath {
//    UICollectionReusableView *header = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"header" forIndexPath:indexPath];
    &lt;#name#&gt; *header = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:NSStringFromClass([&lt;#name#&gt; class]) forIndexPath:indexPath];
    if (self.&lt;#label#&gt; == nil) {
        self.&lt;#label#&gt; = [[UILabel alloc] initWithFrame:CGRectMake(5.0, 5.0, 100, 15)];
        [self.&lt;#label#&gt; setTextColor:[UIColor lightGrayColor]];
        [self.&lt;#label#&gt; setFont:[UIFont systemFontOfSize:12.0]];
        [header addSubview:self.&lt;#label#&gt;];
    }
    return header;
}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    
}

#pragma mark - &lt; init &gt;

- (UICollectionView *)collectionView {
    if (_collectionView == nil) {
//        CGFloat edgeSpacing = 20;       //!&lt; 边缘
//        CGFloat interitemSpacing = 15;  //!&lt; item间距
//        CGFloat lineSpacing = 8;        //!&lt; 行间距
//        CGFloat itemWidth = (KScreenWidth - insetWidth * 2 - spacing)/2.0;
//        CGFloat itemHeight = itemWidth/(162/120.0);
        UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc]init];
        layout.minimumLineSpacing = 10;
        layout.minimumInteritemSpacing = 10;
        layout.sectionInset = UIEdgeInsetsMake(0, 0, 20, 0);
        layout.headerReferenceSize = CGSizeMake(0, 1);
//        layout.estimatedItemSize = CGSizeMake(300, 20);//注意宽度，不要超过CollectionView本身的size，不然会打印一堆日志
        
        _collectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:layout];
        _collectionView.delegate = self;
        _collectionView.dataSource = self;
        _collectionView.backgroundColor = [UIColor clearColor];
        _collectionView.showsVerticalScrollIndicator = false;
        _collectionView.alwaysBounceVertical = true;//数据少时也能滚动
//        _collectionView.contentInset = UIEdgeInsetsMake(0, 15, 0, 15);
        [_collectionView registerClass:[&lt;#name#&gt; class] forCellWithReuseIdentifier:NSStringFromClass([&lt;#name#&gt; class])];
        [_collectionView registerClass:[&lt;#UICollectionReusableView#&gt; class] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:NSStringFromClass([&lt;#name#&gt; class])];
        
        [self addSubview:_collectionView];
        
        MJRefreshStateHeader *header = [MJRefreshStateHeader headerWithRefreshingTarget:self refreshingAction:@selector(headerRequest)];
        header.lastUpdatedTimeLabel.hidden = YES;
        _collectionView.mj_header = header;
                
        MJRefreshAutoNormalFooter *footer = [MJRefreshAutoNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(footerRequest)];
        _collectionView.mj_footer = footer;
        
    }
    return _collectionView;
}

/**自动布局：
 1. UICollectionViewFlowLayout *layout; 
 layout.estimatedItemSize = CGSizeMake(100, 30);//heigth不能设置太高，否则手指下滑时，界面会回弹
 
 2. 在cell内实现下面这个方法：
 override func preferredLayoutAttributesFitting(_ layoutAttributes: UICollectionViewLayoutAttributes) -&gt; UICollectionViewLayoutAttributes {
         setNeedsLayout()
         layoutIfNeeded()
         let size = contentView.systemLayoutSizeFitting(layoutAttributes.size)
         var newFrame = layoutAttributes.frame
         newFrame.size.height = (textView.text?.isSpaceOrEmpty ?? true) ? 0 : ceil(size.height)
         layoutAttributes.frame = newFrame
         return layoutAttributes
 }
 - (UICollectionViewLayoutAttributes *)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes *)layoutAttributes {
     [self setNeedsLayout];
     [self layoutIfNeeded];
 //下面两句没什么用，可以用‘string’获取size
     CGSize size = [self.contentView systemLayoutSizeFittingSize:layoutAttributes.size];
 CGSize size = [self.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
 CGFloat height = [self.model.content sizeWithMaxWidth:self.textLabel.width font:self.textLabel.font].height + 20;
 CGRect newFrame = layoutAttributes.frame;
     newFrame.size.height = _textLabel.height; //如果设置width超过cell,会异常。(实际是在代理那设置了宽高。不好用，结构简单的话还是用代理回调设置)
     layoutAttributes.frame = newFrame;
     return layoutAttributes;
 
 刷新单个cell
 [UIView performWithoutAnimation:^{
     [self.collectionView reloadItemsAtIndexPaths:[NSArray arrayWithObject:indexPath]];
 }];
 }
 */</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>295979CB-9699-4058-93CD-FC59C68D8CE8</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>快速创建UICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
