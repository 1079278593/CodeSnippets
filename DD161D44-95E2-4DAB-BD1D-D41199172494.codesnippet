<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>iosBlockWeak</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>oc：
#define WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;
用法如下：
WS(weakself)

swift：
方式1：
lazy var printName: ()-&gt;() = { [unowned self] in
  print(self.name)
}
方式2：
lazy var printName: ()-&gt;() = { [weak self] in
  print(self.name)
}
方式3：
weak var weakSelf = self

swift 中一个类可以嵌套定义另外类，新增加的类只能被当前类使用
在 swift 中，要解除闭包的 循环引用，可以在闭包定义中使用 [unowned self] 或者 [weak self]，其中：
[unowned self] 类似与 OC 中的 unsafe_unretained，如果对象被释放，仍然保留一个 无效引用，不是可选项
[weak self] 类似与 OC 中的 __weak，如果对象被释放，自动指向 nil，更安全
[weak self] 时时监控性能较差，[unowned self]可能导致野指针错误，如果能够确定对象不会被释放，尽量使用 unowned</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>DD161D44-95E2-4DAB-BD1D-D41199172494</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Generic</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>block循环引用的weak配置</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
